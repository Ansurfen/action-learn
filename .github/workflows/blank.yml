name: Daily Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: ['opencmd', 'hulo'] # 需要检测更新的目录

    steps:
      # 检查是否有更新
      - name: Check for updates
        id:  check-updates
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const directory = '${{ matrix.directory }}';
            const { data } = await octokit.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.repository.default_branch,
              head: context.sha
            });
            let updated = false;
            for (const commit of data.commits) {
              if (commit.added.concat(commit.modified).concat(commit.removed).some(p => p.startsWith(directory))) {
                updated = true;
                break;
              }
            }
            return { updated: updated };

      # 如果有更新，则打包并发布
      - name: Create Zip File
        if: steps.check-updates.outputs.updated == 'true'
        run: |
          cd ./${{ matrix.directory }}
          zip -r ../${{ matrix.directory }}.zip .

      - name: List Files
        if: steps.check-updates.outputs.updated == 'true'
        run: ls -R 

      # 发布
      - name: Create Release
        if: steps.check-updates.outputs.updated == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ matrix.directory }}
          release_name: Release ${{ github.run_number }}-${{ matrix.directory }}
          body: Automated daily build and release of directory ${{ matrix.directory }}.
          draft: false
          prerelease: false

      - name: Get Upload URL
        if: steps.check-updates.outputs.updated == 'true'
        id: get_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"
          
      - name: Upload Release Asset
        if: steps.check-updates.outputs.updated == 'true'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.directory }}.zip
          asset_name: ${{ matrix.directory }}.zip
          asset_content_type: application/zip
